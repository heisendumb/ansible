---
- name: "Capturando Deployment: {{ item.deploy_name }}"
  command: "kubectl get deployments -o json -n {{ item.namespace }}"
  register: dc_global

- set_fact:
    tun_pid_file: /tmp/helm_pid

- block:
    - name: set up a tunnel to tiller
      shell: |
        tiller_pod="$(kubectl get pod -l app=helm,name=tiller --namespace kube-system -o name|cut -d/ -f2)"
        nohup kubectl port-forward "$tiller_pod" 44134:44134 --namespace kube-system </dev/null >/dev/null 2>&1 &
        echo "$!" >{{ tun_pid_file|quote }}
      args:
        creates: "{{ tun_pid_file }}"
      changed_when: false

    - name: "New-srv: {{ item.namespace }}/{{ item.deploy_name }}"
      shell: |
        helm del --purge {{ item.deploy_name }}
        helm install stable/{{ item.deploy_name }} --namespace {{ item.namespace }} --name {{ item.name }} 
      #helm:
      #  host: localhost
      #  chart:
      #    name: "{{ item.pkg_name }}"
      #    version: "{{ item.pkg_version }}"
      #    source:
      #      type: repo
      #      location: "{{ item.chart_url}}"
      #  state: present
      #  name: "{{ item.deploy_name }}"
      #  namespace: "{{ item.namespace }}"

  always:
    - name: tear down the tunnel to tiller
      shell: |
        kill "$(cat {{ tun_pid_file|quote }})" || true
        rm -f {{ tun_pid_file|quote }}
      args:
        removes: "{{ tun_pid_file }}"
      changed_when: false
  when: (item.deploy_name not in dc_global.stdout|from_json|json_query('items[*].metadata.name')) and ('helm' in item.keys()) and (item.helm == True)

- name: "Template DC para new app: {{ item.namespace }}/{{ item.deploy_name}}"
  template:
    src: DeploymentConfig.j2
    dest: DeploymentConfig.yml
  when: (item.deploy_name not in dc_global.stdout|from_json|json_query('items[*].metadata.name')) and ('helm' in item.keys()) and (item.helm == False)

- name: "New-app: {{ item.namespace }}/{{ item.deploy_name }}"
  k8s:
    state: present
    definition: "{{ lookup('file', 'DeploymentConfig.yml') | from_yaml }}"
  when: (item.deploy_name not in dc_global.stdout|from_json|json_query('items[*].metadata.name')) and ('helm' in item.keys()) and (item.helm == False)
